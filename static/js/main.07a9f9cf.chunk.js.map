{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","input","height","LoadingScreen","Grid","container","spacing","justify","item","Skeleton","variant","width","App","useState","repos","setRepos","username","setUsername","isLoading","setLoading","hasError","setHasError","errorMessage","setErrorMessage","classes","Container","maxWidth","Box","textAlign","borderBottom","marginBottom","Typography","noValidate","autoComplete","TextField","id","label","size","placeholder","value","onChange","event","target","InputProps","className","Button","color","onClick","fetch","process","then","response","ok","json","result","data","catch","error","errors","message","direction","map","repo","index","Paper","name","description","createdAt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAgBMA,G,MAAYC,YAAW,CAC3BC,MAAO,CACLC,OAAQ,OA4FZ,SAASC,IACP,OACE,qCACE,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,eAApC,UACE,eAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,UACE,cAACC,EAAA,EAAD,CAAUC,QAAQ,OAAOR,OAAQ,KACjC,cAACO,EAAA,EAAD,CAAUC,QAAQ,OAAOC,MAAO,IAAKT,OAAQ,SAE/C,eAACE,EAAA,EAAD,CAAMI,MAAI,EAAV,UACE,cAACC,EAAA,EAAD,CAAUC,QAAQ,OAAOR,OAAQ,KACjC,cAACO,EAAA,EAAD,CAAUC,QAAQ,OAAOC,MAAO,IAAKT,OAAQ,YAGjD,eAACE,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,eAApC,UACE,eAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,UACE,cAACC,EAAA,EAAD,CAAUC,QAAQ,OAAOR,OAAQ,KACjC,cAACO,EAAA,EAAD,CAAUC,QAAQ,OAAOC,MAAO,IAAKT,OAAQ,SAE/C,eAACE,EAAA,EAAD,CAAMI,MAAI,EAAV,UACE,cAACC,EAAA,EAAD,CAAUC,QAAQ,OAAOR,OAAQ,KACjC,cAACO,EAAA,EAAD,CAAUC,QAAQ,OAAOC,MAAO,IAAKT,OAAQ,eAOxCU,MAnHf,WAAgB,IAAD,EACaC,mBAAiB,IAD9B,mBACNC,EADM,KACCC,EADD,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGmBJ,oBAAS,GAH5B,mBAGNK,EAHM,KAGKC,EAHL,OAImBN,oBAAS,GAJ5B,mBAINO,EAJM,KAIIC,EAJJ,OAK2BR,mBAAS,IALpC,mBAKNS,EALM,KAKQC,EALR,KAgCPC,EAAUzB,IAEhB,OACE,mCACE,eAAC0B,EAAA,EAAD,CAAWC,SAAS,KAApB,UACE,cAACC,EAAA,EAAD,CAAKC,UAAU,SAASC,aAAc,EAAGC,aAAc,EAAvD,SACE,cAACC,EAAA,EAAD,CAAYrB,QAAQ,KAApB,6CAEF,eAACN,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,eAApC,UACE,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,sBAAMwB,YAAU,EAACC,aAAa,MAA9B,SACE,cAACC,EAAA,EAAD,CACEC,GAAG,cACHC,MAAM,kBACN1B,QAAQ,WACR2B,KAAK,QACLC,YAAY,aACZC,MAAOvB,EACPwB,SAAU,SAACC,GAAD,OAAWxB,EAAYwB,EAAMC,OAAOH,QAC9CI,WAAY,CAAEC,UAAWpB,EAAQvB,aAIvC,cAACG,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACqC,EAAA,EAAD,CACEnC,QAAQ,YACRoC,MAAM,UACNT,KAAK,QACLU,QArDa,WACvB5B,GAAW,GACXE,GAAY,GAEZ2B,MAAM,GAAD,OAAIC,wBAAJ,kBAAgDjC,EAAhD,WACFkC,MAAK,SAACC,GACL,GAAIA,EAASC,GACX,OAAOD,EAASE,OAEhB,MAAMF,KAGTD,MAAK,SAACI,GACLvC,EAASuC,EAAOC,MAChBpC,GAAW,MAEZqC,OAAM,SAACL,GACNA,EAASE,OAAOH,MAAK,SAACO,GACpBlC,EAAgBkC,EAAMC,OAAO,GAAGC,SAChCtC,GAAY,GACZF,GAAW,UA6BT,oCAUHD,EACC,cAACf,EAAD,IACEiB,EACF,cAACW,EAAA,EAAD,CAAYe,MAAM,QAAlB,SAA2BxB,IAE3B,cAAClB,EAAA,EAAD,CAAMC,WAAS,EAACuD,UAAU,SAAStD,QAAS,EAAGC,QAAQ,eAAvD,SACGO,EAAM+C,KAAI,SAACC,EAAMC,GAAP,OACT,cAAC3D,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,eAACwD,EAAA,EAAD,WACE,cAACjC,EAAA,EAAD,UAAa+B,EAAKG,OAClB,cAAClC,EAAA,EAAD,UAAa+B,EAAKI,cAClB,cAACnC,EAAA,EAAD,UAAa+B,EAAKK,gBAJNJ,cCjFfK,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.07a9f9cf.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Typography,\n  Container,\n  Box,\n  TextField,\n  Button,\n  Grid,\n  Paper,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\";\n\nimport \"./App.css\";\nimport { UserReposResponse, Repo, ErrorResponse } from \"./types\";\n\nconst useStyles = makeStyles({\n  input: {\n    height: 42,\n  },\n});\n\nfunction App() {\n  const [repos, setRepos] = useState<Repo[]>([]);\n  const [username, setUsername] = useState(\"\");\n  const [isLoading, setLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const generateTimeline = () => {\n    setLoading(true);\n    setHasError(false);\n\n    fetch(`${process.env.REACT_APP_API_BASE_URL}/users/${username}/repos`)\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw response;\n        }\n      })\n      .then((result: UserReposResponse) => {\n        setRepos(result.data);\n        setLoading(false);\n      })\n      .catch((response: Response) => {\n        response.json().then((error: ErrorResponse) => {\n          setErrorMessage(error.errors[0].message);\n          setHasError(true);\n          setLoading(false);\n        });\n      });\n  };\n\n  const classes = useStyles();\n\n  return (\n    <>\n      <Container maxWidth=\"sm\">\n        <Box textAlign=\"center\" borderBottom={1} marginBottom={2}>\n          <Typography variant=\"h5\">Generate your GitHub Timeline</Typography>\n        </Box>\n        <Grid container spacing={1} justify=\"space-evenly\">\n          <Grid item>\n            <form noValidate autoComplete=\"off\">\n              <TextField\n                id=\"gh-username\"\n                label=\"GitHub username\"\n                variant=\"outlined\"\n                size=\"small\"\n                placeholder=\"preyansh07\"\n                value={username}\n                onChange={(event) => setUsername(event.target.value)}\n                InputProps={{ className: classes.input }}\n              />\n            </form>\n          </Grid>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"large\"\n              onClick={generateTimeline}\n            >\n              Generate timeline\n            </Button>\n          </Grid>\n        </Grid>\n        {isLoading ? (\n          <LoadingScreen></LoadingScreen>\n        ) : hasError ? (\n          <Typography color=\"error\">{errorMessage}</Typography>\n        ) : (\n          <Grid container direction=\"column\" spacing={2} justify=\"space-evenly\">\n            {repos.map((repo, index) => (\n              <Grid item key={index}>\n                <Paper>\n                  <Typography>{repo.name}</Typography>\n                  <Typography>{repo.description}</Typography>\n                  <Typography>{repo.createdAt}</Typography>\n                </Paper>\n              </Grid>\n            ))}\n          </Grid>\n        )}\n      </Container>\n    </>\n  );\n}\n\nfunction LoadingScreen() {\n  return (\n    <>\n      <Grid container spacing={1} justify=\"space-evenly\">\n        <Grid item>\n          <Skeleton variant=\"text\" height={30} />\n          <Skeleton variant=\"rect\" width={200} height={118} />\n        </Grid>\n        <Grid item>\n          <Skeleton variant=\"text\" height={30} />\n          <Skeleton variant=\"rect\" width={200} height={118} />\n        </Grid>\n      </Grid>\n      <Grid container spacing={1} justify=\"space-evenly\">\n        <Grid item>\n          <Skeleton variant=\"text\" height={30} />\n          <Skeleton variant=\"rect\" width={200} height={118} />\n        </Grid>\n        <Grid item>\n          <Skeleton variant=\"text\" height={30} />\n          <Skeleton variant=\"rect\" width={200} height={118} />\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}